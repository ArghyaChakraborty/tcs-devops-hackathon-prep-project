node('master') {
	def mvnHome
	def registryHost = "34.69.43.242"
	def registryPort = "8081"
	def registryDockerPort = "8083"
	def registryUser = "admin"
	def registryPassword = "admin"
	def sonarHost = "34.70.150.87"
	def sonarPort = "9000"
	
	stage('Checkout') { 
		timestamps {
			cleanWs()
			// Checkout source code repository
			git 'https://github.com/ArghyaChakraborty/tcs-devops-hackathon-prep-project.git'
			mvnHome = tool 'Local-Maven'
		}
	}
	
	stage('Build') {
		timestamps {
			// Run the maven build
			withEnv(["MVN_HOME=$mvnHome"]) {
				if (isUnix()) {
					jobStatus = sh(returnStatus: true, script: 'cd ${WORKSPACE}/SimpleServlet/ && "$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package')
					
					if(jobStatus != 0) {
						sh "exit 1"
					} 
				}
			}
		}
	}
	/*
	stage('Static Analysis') {
		timestamps {
			// Run maven command to perform static analysis & publish report in sonar server
			withEnv(["MVN_HOME=$mvnHome", "sonarHost=$sonarHost", "sonarPort=$sonarPort"]) {
				if (isUnix()) {
					jobStatus = sh(returnStatus: true, script: 'cd ${WORKSPACE}/SimpleServlet/ && "$MVN_HOME/bin/mvn" sonar:sonar -Dsonar.projectKey=tcs-devops-hackathon-prep-project -Dsonar.host.url="http://$sonarHost:$sonarPort" -Dsonar.login=ec4b9a052afbc6884c94e9e754ad3dc7a27dfe2f')
					
					if(jobStatus != 0) {
						sh "exit 1"
					} 
				}
			}
		}
	}
	*/
	
	stage('Upload Build Artifact') {
		timestamps{
			// Upload war file to Nexus artifactory
			try {
				nexusPublisher nexusInstanceId: 'Nexus-Server', nexusRepositoryId: 'maven-releases', packages: [[$class: 'MavenPackage', mavenAssetList: [[classifier: '', extension: '', filePath: './SimpleServlet/target/SimpleServlet-1.war']], mavenCoordinate: [artifactId: 'SimpleServlet', groupId: 'net.javatutorial.tutorials', packaging: 'war', version: '${JOB_NAME}-${BUILD_NUMBER}']]]
				
			} catch(Exception ex) {
				sh "exit 1"
			}
		}
	}
	

	stage('Create and Push Image') {
		timestamps {
			try {
				
				withEnv(["MVN_HOME=$mvnHome", "registryHost=$registryHost", "registryPort=$registryPort", "registryDockerPort=$registryDockerPort", "registryUser=$registryUser", "registryPassword=$registryPassword"]) {

					if (isUnix()) {
						// Download war file from Nexus repository
						jobStatus = sh(returnStatus: true, script: '"$MVN_HOME/bin/mvn" dependency:get -DremoteRepositories=http://"${registryHost}":"${registryPort}"/repository/maven-releases/ -DgroupId=net.javatutorial.tutorials -DartifactId=SimpleServlet -Dversion=${JOB_NAME}-${BUILD_NUMBER} -Dpackaging=war -Ddest=${WORKSPACE}/docker/')
						
						if(jobStatus != 0) {
							sh "exit 1"
						} 
						
						// Create & push Docker Image
						loginStatus = sh(returnStatus: true, script: 'docker login "${registryHost}":"${registryDockerPort}" -u "${registryUser}" -p "${registryPassword}"')
						if(loginStatus != 0) {
							sh "Login to Docker Registry failed"
							sh "exit 1"
						}
						def customImage =  docker.build("${registryHost}:${registryDockerPort}/simpleservlet:${JOB_NAME}-${BUILD_NUMBER}", "${WORKSPACE}/docker/")
						customImage.push()
					}
				}


			} catch(Exception ex) {
				sh "exit 1"
			}
		}
	}
	
	/*
	stage('Deploy') {
		// Deploy docker image to kubernetes cluster
	}
	*/
}